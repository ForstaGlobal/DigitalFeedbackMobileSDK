// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ConfirmitMobileSDK
import Compression
import CoreFoundation
import Foundation
import JavaScriptCore
import SQLite3
import Security
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import os.log
import os
public class QuestionText {
  public var isEmpty: Swift.Bool {
    get
  }
  final public let rawText: Swift.String
  final public let hasStyle: Swift.Bool
  public init(rawText: Swift.String, hasStyle: Swift.Bool = true)
  public func get() -> Swift.String
  public func getAttributed() -> Foundation.NSAttributedString
  public func getAttributed(size: CoreGraphics.CGFloat, color: Swift.String) -> Foundation.NSAttributedString
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TextQuestion : ConfirmitMobileSDK.DefaultQuestion {
  public var appearance: ConfirmitMobileSDK.OpenTextAppearance {
    get
  }
  public func setValue(value: Swift.String?)
  public func getValue() -> Swift.String?
  override public func validate() throws -> [ConfirmitMobileSDK.ValidationQuestionError]
  @objc deinit
}
public protocol SurveyWebViewCallback : AnyObject {
  func onSurveyClosed()
}
extension WebKit.WKUserContentController {
  public func enableSurveyAutoDismiss(callback: ConfirmitMobileSDK.SurveyWebViewCallback)
}
public struct ScenarioResponse : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct ScenarioCounterResponse : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class ProgramUrl : Swift.Encodable, Swift.Decodable {
  final public let counterUrl: Swift.String
  final public let cfrUrl: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public protocol SurveyWebViewControllerDelegate {
  func onWebViewSurveyError(serverId: Swift.String, projectId: Swift.String, error: Swift.Error)
  func onWebViewSurveyFinished(serverId: Swift.String, projectId: Swift.String)
  func onWebViewSurveyQuit(serverId: Swift.String, projectId: Swift.String)
}
extension UIKit.UIColor {
  convenience public init?(hexString: Swift.String)
}
public protocol Question : AnyObject {
  var id: Swift.String { get }
  var nodeType: ConfirmitMobileSDK.QuestionType { get }
}
@_hasMissingDesignatedInitializers public class QuestionAnswer {
  final public let code: Swift.String
  final public let text: ConfirmitMobileSDK.QuestionText
  final public let isHeader: Swift.Bool
  public var answers: [ConfirmitMobileSDK.QuestionAnswer] {
    get
  }
  @objc deinit
}
public struct TriggerBeaconInfo : Swift.Encodable {
  public init(uuid: Swift.String, major: Swift.Int?, minor: Swift.Int?)
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class DefaultQuestion : ConfirmitMobileSDK.Question {
  final public let id: Swift.String
  final public let nodeType: ConfirmitMobileSDK.QuestionType
  final public let title: ConfirmitMobileSDK.QuestionText
  final public let text: ConfirmitMobileSDK.QuestionText
  final public let instruction: ConfirmitMobileSDK.QuestionText
  public var errors: [ConfirmitMobileSDK.ValidationQuestionError] {
    get
  }
  public func validate() throws -> [ConfirmitMobileSDK.ValidationQuestionError]
  @objc deinit
}
public typealias SurveyDownloadCompletion = (Swift.Bool, Swift.Error?) -> Swift.Void
public protocol UniqueIdProvider {
  func getUniqueId() -> Swift.String
}
public protocol SurveyScriptBridge {
  func consoleLog(text: Swift.String)
}
public enum SurveySDK {
  public static func setUniqueIdProvider(provider: ConfirmitMobileSDK.UniqueIdProvider?)
  public static func setScriptBridge(bridge: ConfirmitMobileSDK.SurveyScriptBridge?)
  public static func getSurvey(serverId: Swift.String, surveyId: Swift.String) throws -> ConfirmitMobileSDK.Survey?
  public static func deleteSurvey(serverId: Swift.String, surveyId: Swift.String) throws
  public static func getSurveyList() throws -> [ConfirmitMobileSDK.Survey]
  public static func downloadSurvey(serverId: Swift.String, surveyId: Swift.String, completion: @escaping ConfirmitMobileSDK.SurveyDownloadCompletion)
}
@_hasMissingDesignatedInitializers public class InfoQuestion : ConfirmitMobileSDK.Question {
  final public let nodeType: ConfirmitMobileSDK.QuestionType
  final public let id: Swift.String
  final public let title: ConfirmitMobileSDK.QuestionText
  final public let text: ConfirmitMobileSDK.QuestionText
  final public let instruction: ConfirmitMobileSDK.QuestionText
  @objc deinit
}
public typealias JSON = [Swift.String : Any]
public typealias TriggerDownloadComplete = (Swift.Bool, Swift.Error?) -> Swift.Void
public protocol ProgramScriptBridge {
  func consoleLog(text: Swift.String)
}
public enum TriggerSDK {
  public static var testMode: Swift.Bool
  public static func setScriptBridge(bridge: ConfirmitMobileSDK.ProgramScriptBridge?)
  public static func setCallback(serverId: Swift.String, programKey: Swift.String, callback: ConfirmitMobileSDK.ProgramCallback)
  public static func removeCallback(serverId: Swift.String, programKey: Swift.String)
  public static func download(serverId: Swift.String, programKey: Swift.String, completion: @escaping ConfirmitMobileSDK.TriggerDownloadComplete)
  public static func downloadCounters(serverId: Swift.String, programKey: Swift.String, completion: @escaping ConfirmitMobileSDK.TriggerDownloadComplete)
  public static func notifyEvent(serverId: Swift.String, programKey: Swift.String, event: Swift.String, data: [Swift.String : Swift.String?] = [:])
  public static func notifyEvent(event: Swift.String, data: [Swift.String : Swift.String?] = [:])
  public static func notifyAppForeground(data: [Swift.String : Swift.String?] = [:])
  public static func notifyAppFeedback(data: [Swift.String : Swift.String?] = [:])
  public static func notifyBeaconEnter(triggerBeaconInfo: ConfirmitMobileSDK.TriggerBeaconInfo, data: [Swift.String : Swift.String?] = [:])
  public static func notifyBeaconExit(triggerBeaconInfo: ConfirmitMobileSDK.TriggerBeaconInfo, data: [Swift.String : Swift.String?] = [:])
  public static func getPrograms(serverId: Swift.String) throws -> [ConfirmitMobileSDK.Program]
  public static func getProgram(serverId: Swift.String, programKey: Swift.String) throws -> ConfirmitMobileSDK.Program?
  public static func getActiveScenarioCount(serverId: Swift.String, programKey: Swift.String) throws -> Swift.Int
  public static func deleteProgram(serverId: Swift.String, programKey: Swift.String, deleteCustomData: Swift.Bool) throws
  public static func deleteAll(deleteCustomData: Swift.Bool) throws
  public static func getProgramVariable(serverId: Swift.String, programKey: Swift.String, key: Swift.String) throws -> Swift.String?
  public static func setProgramVariable(serverId: Swift.String, programKey: Swift.String, key: Swift.String, value: Swift.String?) throws
}
@_hasMissingDesignatedInitializers public class SurveyWebViewUrl {
  final public let url: Swift.String
  final public let token: Swift.String
  final public let urlRequest: Foundation.URLRequest?
  @objc deinit
}
public typealias SurveyWebViewUrlCompletion = (ConfirmitMobileSDK.SurveyWebViewUrl?, Swift.Error?) -> Swift.Void
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SurveyWebViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var delegate: ConfirmitMobileSDK.SurveyWebViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) public var customData: [Swift.String : Swift.String?] {
    get
  }
  @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) public func getSurveyUrl(completion: @escaping ConfirmitMobileSDK.SurveyWebViewUrlCompletion)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setupWebView(serverId: Swift.String, projectId: Swift.String, customData: [Swift.String : Swift.String?])
  @_Concurrency.MainActor(unsafe) public func getWebview() -> WebKit.WKWebView?
  @objc deinit
}
extension ConfirmitMobileSDK.SurveyWebViewController : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_: WebKit.WKWebView, didFinish _: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
}
extension ConfirmitMobileSDK.SurveyWebViewController : ConfirmitMobileSDK.SurveyWebViewCallback {
  @_Concurrency.MainActor(unsafe) public func onSurveyClosed()
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ExternalWebViewController : UIKit.UIViewController {
  @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
}
extension ConfirmitMobileSDK.ExternalWebViewController : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_: WebKit.WKWebView, didFinish _: WebKit.WKNavigation!)
}
public protocol SurveyFrameDelegate : AnyObject {
  func onSurveyPageReady(page: ConfirmitMobileSDK.SurveyPage)
  func onSurveyErrored(page: ConfirmitMobileSDK.SurveyPage, values: [Swift.String : Swift.String?], error: Swift.Error)
  func onSurveyFinished(page: ConfirmitMobileSDK.SurveyPage, values: [Swift.String : Swift.String?])
  func onSurveyQuit(values: [Swift.String : Swift.String?])
}
public class SurveyFrameConfig {
  public var languageId: Swift.Int?
  public var respondentValues: [Swift.String : Swift.String]
  public var customData: [Swift.String : Swift.String?]
  final public let serverId: Swift.String
  final public let surveyId: Swift.String
  public var programKey: Swift.String?
  public var scenarioId: Swift.Int64?
  public init(serverId: Swift.String, surveyId: Swift.String)
  @objc deinit
}
public class SurveyFrameActionResult {
  final public let success: Swift.Bool
  final public let message: Swift.String
  public init(success: Swift.Bool, message: Swift.String)
  @objc deinit
}
public class SurveyFrame {
  weak public var delegate: ConfirmitMobileSDK.SurveyFrameDelegate?
  public var page: ConfirmitMobileSDK.SurveyPage? {
    get
  }
  public init()
  final public func load(config: ConfirmitMobileSDK.SurveyFrameConfig) throws
  final public func start() -> ConfirmitMobileSDK.SurveyFrameActionResult
  final public func next() -> ConfirmitMobileSDK.SurveyFrameActionResult
  final public func back() -> ConfirmitMobileSDK.SurveyFrameActionResult
  final public func quit(upload: Swift.Bool) -> ConfirmitMobileSDK.SurveyFrameActionResult
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SurveyPage {
  public var questions: [ConfirmitMobileSDK.Question] {
    get
  }
  public var title: ConfirmitMobileSDK.QuestionText {
    get
  }
  public var text: ConfirmitMobileSDK.QuestionText? {
    get
  }
  public var forwardText: Swift.String {
    get
  }
  public var backwardText: Swift.String {
    get
  }
  public var okText: Swift.String {
    get
  }
  public var showForward: Swift.Bool {
    get
  }
  public var showBackward: Swift.Bool {
    get
  }
  public var showOk: Swift.Bool {
    get
  }
  @objc deinit
}
public class Program {
  final public let serverId: Swift.String
  final public let programKey: Swift.String
  final public let started: Swift.Bool
  final public let publishedVersion: Swift.Int64
  public init(serverId: Swift.String, programKey: Swift.String, publishedVersion: Swift.Int64, started: Swift.Bool, programUrl: ConfirmitMobileSDK.ProgramUrl)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Server {
  final public let serverId: Swift.String
  final public let name: Swift.String
  final public let host: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SurveyLanguage : Swift.Encodable, Swift.Decodable {
  final public let id: Swift.Int
  final public let code: Swift.String
  final public let name: Swift.String
  final public let nativeName: Swift.String
  final public let isDefault: Swift.Bool
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class NotSupportedQuestion : ConfirmitMobileSDK.Question {
  final public let nodeType: ConfirmitMobileSDK.QuestionType
  final public let id: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Survey {
  final public let serverId: Swift.String
  final public let surveyId: Swift.String
  final public let name: Swift.String
  final public let description: Swift.String
  final public let companyId: Swift.Int
  final public let packageVersion: Swift.Int
  final public let languages: [ConfirmitMobileSDK.SurveyLanguage]
  public func getDefaultLanguage() throws -> ConfirmitMobileSDK.SurveyLanguage
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MultiQuestion : ConfirmitMobileSDK.DefaultQuestion {
  public var answers: [ConfirmitMobileSDK.QuestionAnswer] {
    get
  }
  public var appearance: ConfirmitMobileSDK.MultiAppearance {
    get
  }
  public func set(answer: ConfirmitMobileSDK.QuestionAnswer, select: Swift.Bool)
  public func get(answer: ConfirmitMobileSDK.QuestionAnswer) -> Swift.Bool
  override public func validate() throws -> [ConfirmitMobileSDK.ValidationQuestionError]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SingleQuestion : ConfirmitMobileSDK.DefaultQuestion {
  public var answers: [ConfirmitMobileSDK.QuestionAnswer] {
    get
  }
  public var appearance: ConfirmitMobileSDK.SingleAppearance {
    get
  }
  public func select(answer: ConfirmitMobileSDK.QuestionAnswer)
  public func selected() -> ConfirmitMobileSDK.QuestionAnswer?
  override public func validate() throws -> [ConfirmitMobileSDK.ValidationQuestionError]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NumericQuestion : ConfirmitMobileSDK.DefaultQuestion {
  public var appearance: ConfirmitMobileSDK.NumericAppearance {
    get
  }
  public func setValue(value: Swift.Double?)
  public func setValue(value: Swift.Int?)
  public func getValue() -> Swift.Double?
  public func getValue() -> Swift.Int?
  public func getValue() -> Swift.String?
  override public func validate() throws -> [ConfirmitMobileSDK.ValidationQuestionError]
  @objc deinit
}
public enum ValidationError {
  case required
  case size(length: Swift.Int)
  case xssSafe
  case number
  case range
  case multiSelected
}
public struct ValidationQuestionError {
  public let code: ConfirmitMobileSDK.ValidationError
  public var message: Swift.String
}
public enum QuestionType {
  case single
  case multi
  case text
  case numeric
  case info
  case notSupported
  public static func == (a: ConfirmitMobileSDK.QuestionType, b: ConfirmitMobileSDK.QuestionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SingleAppearance : Swift.Int, Swift.Decodable {
  case radioButtons
  case answerButtons
  case dropDown
  case slider
  case horizontalRatingScale
  case starRating
  case gridBars
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MultiAppearance : Swift.Int, Swift.Decodable {
  case checkBoxes
  case answerButtons
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum OpenTextAppearance : Swift.Int, Swift.Decodable {
  case textField
  case paragraph
  case essay
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum NumericAppearance : Swift.Int, Swift.Decodable {
  case numericField
  case numericSlider
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol AccessTokenProvider {
  func getAccessToken(serverId: Swift.String) -> Swift.String?
}
public protocol ConfirmitModule {
  func initialize(setup: ConfirmitMobileSDK.ConfirmitSDK.Setup)
}
public enum ConfirmitSDK {
  public static func setAccessTokenProvider(provider: ConfirmitMobileSDK.AccessTokenProvider?)
  public static func enableLog(enable: Swift.Bool, oslog: Swift.Bool = true)
  public class Setup {
    public init()
    public func rootPath(path: Foundation.URL?) -> ConfirmitMobileSDK.ConfirmitSDK.Setup
    public func configure()
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class TriggerInfo {
  public var serverId: Swift.String
  public var programKey: Swift.String
  @objc deinit
}
public protocol ProgramCallback {
  func onSurveyDownloadCompleted(triggerInfo: ConfirmitMobileSDK.TriggerInfo, surveyId: Swift.String, error: Swift.Error?)
  func onSurveyStart(config: ConfirmitMobileSDK.SurveyFrameConfig)
  func onScenarioLoad(triggerInfo: ConfirmitMobileSDK.TriggerInfo, error: Swift.Error?)
  func onScenarioError(triggerInfo: ConfirmitMobileSDK.TriggerInfo, error: Swift.Error)
  func onAppFeedback(triggerInfo: ConfirmitMobileSDK.TriggerInfo, data: [Swift.String : Swift.String?])
  func onWebSurveyStart(surveyWebView: ConfirmitMobileSDK.SurveyWebViewController)
}
public enum ConfirmitServer {
  public static var us: ConfirmitMobileSDK.Server! {
    get
  }
  public static var uk: ConfirmitMobileSDK.Server! {
    get
  }
  public static var australia: ConfirmitMobileSDK.Server! {
    get
  }
  public static var nordic: ConfirmitMobileSDK.Server! {
    get
  }
  public static var insights: ConfirmitMobileSDK.Server! {
    get
  }
  public static var canada: ConfirmitMobileSDK.Server! {
    get
  }
  public static var germany: ConfirmitMobileSDK.Server! {
    get
  }
  public static var hxPlatform: ConfirmitMobileSDK.Server! {
    get
  }
  public static func configureUS(clientId: Swift.String, clientSecret: Swift.String) throws
  public static func configureUK(clientId: Swift.String, clientSecret: Swift.String) throws
  public static func configureAustralia(clientId: Swift.String, clientSecret: Swift.String) throws
  public static func configureNordic(clientId: Swift.String, clientSecret: Swift.String) throws
  public static func configureInsights(clientId: Swift.String, clientSecret: Swift.String) throws
  public static func configureCanada(clientId: Swift.String, clientSecret: Swift.String) throws
  public static func configureGermany(clientId: Swift.String, clientSecret: Swift.String) throws
  public static func configureHxPlatform(clientId: Swift.String, clientSecret: Swift.String) throws
  public static func configure(name: Swift.String, host: Swift.String, clientId: Swift.String, clientSecret: Swift.String) throws -> ConfirmitMobileSDK.Server
  public static func getServer(serverId: Swift.String) throws -> ConfirmitMobileSDK.Server?
  public static func getServers() throws -> [ConfirmitMobileSDK.Server]
}
extension ConfirmitMobileSDK.QuestionType : Swift.Equatable {}
extension ConfirmitMobileSDK.QuestionType : Swift.Hashable {}
extension ConfirmitMobileSDK.SingleAppearance : Swift.Equatable {}
extension ConfirmitMobileSDK.SingleAppearance : Swift.Hashable {}
extension ConfirmitMobileSDK.SingleAppearance : Swift.RawRepresentable {}
extension ConfirmitMobileSDK.MultiAppearance : Swift.Equatable {}
extension ConfirmitMobileSDK.MultiAppearance : Swift.Hashable {}
extension ConfirmitMobileSDK.MultiAppearance : Swift.RawRepresentable {}
extension ConfirmitMobileSDK.OpenTextAppearance : Swift.Equatable {}
extension ConfirmitMobileSDK.OpenTextAppearance : Swift.Hashable {}
extension ConfirmitMobileSDK.OpenTextAppearance : Swift.RawRepresentable {}
extension ConfirmitMobileSDK.NumericAppearance : Swift.Equatable {}
extension ConfirmitMobileSDK.NumericAppearance : Swift.Hashable {}
extension ConfirmitMobileSDK.NumericAppearance : Swift.RawRepresentable {}
